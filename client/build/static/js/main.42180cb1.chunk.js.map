{"version":3,"sources":["photos/border.js","photos/thumbnail.js","photos/grid.js","App.js","reportWebVitals.js","index.js"],"names":["Border","classes","GridListTileBar","title","titlePosition","actionIcon","IconButton","aria-label","className","icon","color","actionPosition","Thumbnail","image","editMode","useState","selected","setSelected","useEffect","onClick","uploadedImage","src","picture","alt","message","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","Grid","update","setUpdate","setEditMode","entries","grid","setGrid","a","axios","result","get","data","length","map","images","includes","id","gridId","_id","fetchData","saveGrid","post","filter","img","success","updateGrid","put","GridList","cellHeight","cols","GridListTile","Button","App","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42180cb1.chunk.js","sourcesContent":["import GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nfunction Border({ classes }) {\r\n\r\n\r\n    return (<GridListTileBar\r\n        title={''}\r\n        titlePosition=\"top\"\r\n        actionIcon={\r\n            <IconButton aria-label={''} className={classes.icon} color={'primary'}>\r\n                <CheckIcon />\r\n            </IconButton>\r\n        }\r\n        actionPosition=\"left\"\r\n    />);\r\n\r\n}\r\n\r\nexport default Border;","import React, { useState,useEffect } from 'react';\r\nimport Border from './border';\r\n\r\nfunction Thumbnail({ image,editMode }) {\r\n    const [selected, setSelected] = useState(image.selected);\r\n    useEffect(() => {\r\n        setSelected(image.selected);\r\n      }, [image.selected]);\r\n      \r\n    const imageToggled = (uploadedImage) => {\r\n        if(uploadedImage.selected){\r\n            setSelected(false);\r\n            uploadedImage.selected = false;\r\n        }\r\n        else{\r\n            setSelected(true);\r\n            uploadedImage.selected = true;\r\n        }\r\n    };\r\n\r\n    return (<>\r\n        <img  onClick={() => imageToggled(image)} src={image.picture} alt={image.message} />\r\n        {selected && editMode && <Border classes ></Border>}\r\n    </>);\r\n}\r\n\r\nexport default Thumbnail;","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport Thumbnail from './thumbnail';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    gridList: {\r\n        width: 500,\r\n        height: 450,\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n}));\r\n\r\nfunction Grid() {\r\n    const classes = useStyles();\r\n    const [update, setUpdate] = useState(false);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [grid, setGrid] = useState({ entries: [] });\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const result = await axios('https://dev-pb-apps.s3-eu-west-1.amazonaws.com/collection/CHhASmTpKjaHyAsSaauThRqMMjWanYkQ.json', {}); // need to move this to the API level\r\n            const { data } = await axios.get('/api/grid');\r\n            if (data && data.data && data.data.length > 0) {\r\n                setUpdate(true);\r\n            }\r\n            result.data.entries = result.data.entries.map(uploadedImage => {\r\n                if (data.data.length > 0 && data.data[0].images.includes(uploadedImage.id)) {\r\n                    uploadedImage.selected = true;\r\n                }\r\n                else {\r\n                    uploadedImage.selected = false;\r\n                }\r\n                return uploadedImage\r\n            });\r\n            setGrid({ ...result.data, gridId: data.data[0]._id });\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    const saveGrid = async () => {\r\n        const result = await axios.post('/api/grid', {\r\n            images: grid.entries.filter(uploadedImage => uploadedImage.selected).map(img => img.id)\r\n        });\r\n        if(result.data.success){\r\n            setEditMode(false)\r\n        }\r\n        else{\r\n            //display toast message\r\n        }\r\n    };\r\n\r\n    const updateGrid = async () => {\r\n        const result = await axios.put(`/api/grid/${grid.gridId}`, {\r\n            images: grid.entries.filter(uploadedImage => uploadedImage.selected).map(img => img.id)\r\n        });\r\n        if(result.data.success){\r\n            setEditMode(false)\r\n        }\r\n        else{\r\n            //display toast message\r\n        }\r\n    };\r\n\r\n\r\n    const getImages = () => {\r\n        return editMode ? grid.entries :\r\n        grid.entries.filter(uploadedImage => uploadedImage.selected);\r\n    }\r\n\r\n    return (<div className={classes.root}>\r\n        <GridList cellHeight={160} className={classes.gridList} cols={3}>\r\n            {getImages().map((uploadedImage) => (\r\n                <GridListTile key={uploadedImage.id} cols={1} >\r\n                    <Thumbnail classes image={uploadedImage} editMode={editMode}>\r\n                    </Thumbnail>\r\n                </GridListTile>\r\n            ))}\r\n        </GridList>\r\n        {!editMode && !update && <Button onClick={saveGrid}>Save</Button>}\r\n        {editMode && update && <Button onClick={updateGrid}>Update</Button>}\r\n        {!editMode && <Button onClick={() => setEditMode(true)}>Edit</Button>}\r\n    </div>);\r\n}\r\n\r\nexport default Grid;","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Grid from './photos/grid';\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Grid</Link>\n            </li>\n          </ul>\n        </nav>\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/\">\n            <Grid />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}